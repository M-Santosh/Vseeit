package com.santosh.vseeit;import android.content.Intent;import android.content.res.ColorStateList;import android.graphics.Color;import android.os.Handler;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.Button;import android.widget.ImageView;import android.widget.TextView;import androidx.annotation.NonNull;import androidx.constraintlayout.widget.ConstraintLayout;import androidx.gridlayout.widget.GridLayout;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import androidx.viewpager.widget.ViewPager;import com.bumptech.glide.Glide;import com.bumptech.glide.request.RequestOptions;import java.util.ArrayList;import java.util.List;import java.util.Timer;import java.util.TimerTask;public class HomePageAdapter extends RecyclerView.Adapter {    private List<HomePagemodel> homePagemodelList;    private RecyclerView.RecycledViewPool recycledViewPool;    private int lastposition = -1;    public HomePageAdapter(List<HomePagemodel> homePagemodelList) {        this.homePagemodelList = homePagemodelList;    recycledViewPool = new RecyclerView.RecycledViewPool();    }    @Override    public int getItemViewType(int position) {       switch (homePagemodelList.get(position).getType()){           case 0:               return HomePagemodel.BANNER_SLIDER;           case 1:               return HomePagemodel.STRIP_AD_BANNER;           case 2:               return HomePagemodel.HORIZONTAL_PRO_VIEW;           case 3:               return HomePagemodel.GRID_PRO_VIEW;               default:                    return -1;       }    }    @NonNull    @Override    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        switch (viewType){          case HomePagemodel.BANNER_SLIDER:              View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.sliding_ad_layout,parent,false);              return new BannerSliderViewholder(view);              case HomePagemodel.STRIP_AD_BANNER:                  View stripview = LayoutInflater.from(parent.getContext()).inflate(R.layout.strip_ad_layout,parent,false);                  return new stripAdbannviewholder(stripview);                case HomePagemodel.HORIZONTAL_PRO_VIEW:                    View Horizonview = LayoutInflater.from(parent.getContext()).inflate(R.layout.horizontal_scroll_layout,parent,false);                    return new Horizonviewholder(Horizonview);                    case HomePagemodel.GRID_PRO_VIEW:                        View grdview = LayoutInflater.from(parent.getContext()).inflate(R.layout.grid_product_layout,parent,false);                        return new Gridviewholder(grdview);                    default:                        return null;      }    }    @Override    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {        switch (homePagemodelList.get(position).getType()) {            case HomePagemodel.BANNER_SLIDER:                List<SliderModel> sliderModelList = homePagemodelList.get(position).getSliderModelList();                ((BannerSliderViewholder) holder).setBannerSliderviewpager(sliderModelList);                break;            case HomePagemodel.STRIP_AD_BANNER:                String resource = homePagemodelList.get(position).getResource();                String color = homePagemodelList.get(position).getBgcolor();                ((stripAdbannviewholder) holder).setStripAd(resource, color);                break;            case HomePagemodel.HORIZONTAL_PRO_VIEW:                String layoutcolor = homePagemodelList.get(position).getBgcolor();                String horizontalayoutitle = homePagemodelList.get(position).getTitle();                List<Wishlistmodel> viewAllpro = homePagemodelList.get(position).getViewAllpro();                List<HorizontalProductModel> horizontalProModelList = homePagemodelList.get(position).getHorizontalProductModelList();                ((Horizonviewholder) holder).setHorizontalProlayout(horizontalProModelList, horizontalayoutitle, layoutcolor, viewAllpro);                break;            case HomePagemodel.GRID_PRO_VIEW:                String grid_color = homePagemodelList.get(position).getBgcolor();                String gridlayoutTitle = homePagemodelList.get(position).getTitle();                List<HorizontalProductModel> gridProductModelList = homePagemodelList.get(position).getHorizontalProductModelList();                ((Gridviewholder) holder).setGridprolay(gridProductModelList, gridlayoutTitle, grid_color);                break;            default:                return;        }        if (lastposition < position) {            Animation animate = AnimationUtils.loadAnimation(holder.itemView.getContext(), R.anim.fade_in);            holder.itemView.setAnimation(animate);            lastposition = position;        }    }    @Override    public int getItemCount() {        return homePagemodelList.size();    }    public class BannerSliderViewholder extends RecyclerView.ViewHolder {        private ViewPager bannerSliderviewpager;        private int currentpage;        private Timer timer;        final private long DELAY_TIME = 2000;        final private long PERIOD_TIME = 1000;        private List<SliderModel> arrangedList;        public BannerSliderViewholder(@NonNull View itemView) {            super(itemView);            bannerSliderviewpager = itemView.findViewById(R.id.banner_viewpager);        }        private void setBannerSliderviewpager(final List<SliderModel>sliderModelList){            currentpage = 2;            if (timer !=null){                timer.cancel();            }            arrangedList = new ArrayList<>();            for (int s=0; s< sliderModelList.size(); s++){              arrangedList.add(s,sliderModelList.get(s));            }            arrangedList.add(0,sliderModelList.get(sliderModelList.size() - 2));            arrangedList.add(1,sliderModelList.get(sliderModelList.size() - 1));            arrangedList.add(sliderModelList.get(0));            arrangedList.add(sliderModelList.get(1));            SliderAdapter sliderAdapter = new SliderAdapter(arrangedList);            bannerSliderviewpager.setAdapter(sliderAdapter);            bannerSliderviewpager.setClipToPadding(false);            bannerSliderviewpager.setPageMargin(20);            bannerSliderviewpager.setCurrentItem(currentpage);            ViewPager.OnPageChangeListener onPageChangeListener = new ViewPager.OnPageChangeListener() {                @Override                public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {                }                @Override                public void onPageSelected(int position) {                    currentpage = position;                }                @Override                public void onPageScrollStateChanged(int state) {                    if (state == ViewPager.SCROLL_STATE_IDLE) {                        pageLooper(arrangedList);                    }                }            };            bannerSliderviewpager.addOnPageChangeListener(onPageChangeListener);            startbannerslidershow(arrangedList);            bannerSliderviewpager.setOnTouchListener(new View.OnTouchListener() {                @Override                public boolean onTouch(View v, MotionEvent event) {                    pageLooper(arrangedList);                    stopbannerslideshow();                    if (event.getAction() == MotionEvent.ACTION_UP) {                        startbannerslidershow(arrangedList);                    }                    return false;                }            });        }        private void pageLooper(List<SliderModel>sliderModelList) {            if (currentpage == sliderModelList.size() - 2) {                currentpage = 2;                bannerSliderviewpager.setCurrentItem(currentpage, false);            }            if (currentpage == 1) {                currentpage = sliderModelList.size() - 3;                bannerSliderviewpager.setCurrentItem(currentpage, false);            }        }        private void startbannerslidershow(final List<SliderModel>sliderModelList) {            final Handler handler = new Handler();            final Runnable update = new Runnable() {                @Override                public void run() {                    if (currentpage >= sliderModelList.size()) {                        currentpage = 1;                    }                    bannerSliderviewpager.setCurrentItem(currentpage++, true);                }            };            timer = new Timer();            timer.schedule(new TimerTask() {                @Override                public void run() {                    handler.post(update);                }            }, DELAY_TIME, PERIOD_TIME);        }        private void stopbannerslideshow() {            timer.cancel();            //Banner slider        }    }    public class stripAdbannviewholder extends RecyclerView.ViewHolder{        private ImageView stripAdImage;        private ConstraintLayout stripAdcontainer;        public stripAdbannviewholder(@NonNull View itemView) {            super(itemView);            stripAdImage = itemView.findViewById(R.id.strip_ad_image);            stripAdcontainer = itemView.findViewById(R.id.strip_ad_container);        }        private void setStripAd(String resource, String color){//stripAdImage.setImageResource(resource);            //Firebase_adbanner            Glide.with(itemView.getContext()).load(resource).apply(new RequestOptions().placeholder(R.drawable.img)).into(stripAdImage);            //Firebase_adbanner        stripAdcontainer.setBackgroundColor(Color.parseColor(color));        }    }    public class Horizonviewholder extends RecyclerView.ViewHolder{        private ConstraintLayout container;        private TextView horizontitle;        private Button horizonbtn;        private RecyclerView horizoncycleview;        public Horizonviewholder(@NonNull View itemView) {            super(itemView);            container= itemView.findViewById(R.id.hzcontainer);            horizontitle = itemView.findViewById(R.id.horiz_scr_lay_title);            horizonbtn = itemView.findViewById(R.id.horiz_scr_lay_btn);            horizoncycleview = itemView.findViewById(R.id.horiz_scr_lay_recyclerview);            horizoncycleview.setRecycledViewPool(recycledViewPool);        }        private void setHorizontalProlayout(List<HorizontalProductModel>horizontalProductModelList, final String title, String color, final List<Wishlistmodel> viewAllpro) {            container.setBackgroundTintList(ColorStateList.valueOf(Color.parseColor(color)));            horizontitle.setText(title);            if (horizontalProductModelList.size() > 8){                horizonbtn.setVisibility(View.VISIBLE);                horizonbtn.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        ViewallActivity.wishlistmodelList = viewAllpro;                        Intent viewall = new Intent(itemView.getContext(),ViewallActivity.class);                        viewall.putExtra("layout_code",0);                        viewall.putExtra("title",title);                        itemView.getContext().startActivity(viewall);                    }                });            }else{                horizonbtn.setVisibility(View.INVISIBLE);            }            HorizontalProductAdapter horizontalProductAdapter = new HorizontalProductAdapter(horizontalProductModelList);            LinearLayoutManager linearLayoutManager = new LinearLayoutManager(itemView.getContext());            linearLayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);            horizoncycleview.setLayoutManager(linearLayoutManager);            horizoncycleview.setAdapter(horizontalProductAdapter);            horizontalProductAdapter.notifyDataSetChanged();        }    }    public class Gridviewholder extends RecyclerView.ViewHolder{        private ConstraintLayout contain;        private TextView gridtitle;        private Button gridallbtn;        private GridLayout grdlay;        public Gridviewholder(@NonNull View itemView) {            super(itemView);            contain = itemView.findViewById(R.id.gdcontainer);            gridtitle = itemView.findViewById(R.id.gird_product_title);            gridallbtn = itemView.findViewById(R.id.grid_product_btn);            grdlay = itemView.findViewById(R.id.grid_Layout);        }        private void setGridprolay(final List<HorizontalProductModel>horizontalProductModelList, final String title, String color){            contain.setBackgroundTintList(ColorStateList.valueOf(Color.parseColor(color)));            gridtitle.setText(title);            for (int s = 0; s < 4; s++){                ImageView proimag = grdlay.getChildAt(s).findViewById(R.id.h_s_product_img);                TextView protv = grdlay.getChildAt(s).findViewById(R.id.h_s_product_title);                TextView prodes = grdlay.getChildAt(s).findViewById(R.id.h_s_product_dis);                TextView prprice= grdlay.getChildAt(s).findViewById(R.id.h_s_product_price);                grdlay.getChildAt(s).setBackgroundColor(Color.parseColor("#FFFFFF"));//                proimag.setImageResource(horizontalProductModelList.get(s).getProductimg());                Glide.with(itemView.getContext()).load(horizontalProductModelList.get(s).getProductimg()).apply(new RequestOptions().placeholder(R.drawable.img)).into(proimag);                protv.setText(horizontalProductModelList.get(s).getProductitle());                prodes.setText(horizontalProductModelList.get(s).getProductdis());                prprice.setText("\u20b9 "+horizontalProductModelList.get(s).getProductprice()+"/-");                if (!title.equals("")) {                    grdlay.getChildAt(s).setOnClickListener(new View.OnClickListener() {                        @Override                        public void onClick(View v) {                            Intent prodetailin = new Intent(itemView.getContext(), ProductActivity.class);                            itemView.getContext().startActivity(prodetailin);                        }                    });                }            }            if (!title.equals("")) {                gridallbtn.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        ViewallActivity.horizontalProductModelList = horizontalProductModelList;                        Intent viewall = new Intent(itemView.getContext(), ViewallActivity.class);                        viewall.putExtra("layout_code", 1);                        viewall.putExtra("title", title);                        itemView.getContext().startActivity(viewall);                    }                });            }        }    }}